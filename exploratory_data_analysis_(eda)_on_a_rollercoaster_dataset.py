# -*- coding: utf-8 -*-
"""Exploratory Data Analysis (EDA) on a rollercoaster dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wxgauW_w_B6VmzC2C1S7wqYalntiGuaj

#**Table of Contents**

###Introduction to Exploritary Data Analysis


####Step 1: Imports and Reading Data


####Step 2: Data Preperation


####Step 3: Feature Understanding


####Step 4: Feature Relationships


####Step 5: Ask a Question about the data

###**Step 1: Imports and Reading Data**
"""

# importing the necessary libraries:
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pylab as plt
plt.style.use('ggplot')

# read the dataset
df=pd.read_csv('/content/coaster_db.csv')

"""###Step 1.1: Data UnderstandingÂ¶

*   Dataframe shape
*   head and tail
*   dtypes
*   describe

"""

df.shape

df.head()

df.tail()

df.dtypes

df.columns

df.describe()

"""###**Step 2: Data Preperation**

*  Dropping irrelevant columns and rows
*  Identifying duplicated columns
*  Renaming Columns
*  Feature Creation


"""

#Dropping irrelevant columns
df=df[['coaster_name', 'Location', 'Status', 'Manufacturer',
       'year_introduced', 'latitude', 'longitude', 'Type_Main',
       'opening_date_clean',
       'speed_mph',  'height_ft',
       'Inversions_clean', 'Gforce_clean']].copy()

df.shape

df.dtypes

# Convert "opening_date_clean" column to date type.

df['opening_date_clean']=pd.to_datetime(df['opening_date_clean'])

df.dtypes

## Rename our columns
df = df.rename(columns={'coaster_name': 'Coaster_Name',
                  'year_introduced':'Year_Introduced',
                   'opening_date_clean':'Opening_Date',
                   'speed_mph':'Speed_mph',
                   'height_ft':'Height_ft',
                   'Inversions_clean':'Inversions',
                   'Gforce_clean':'Gforce'})

df.columns

df.head()

# Count null values per column.
df.isna().sum()

# Duplicated rows
Duplicated_rows=df[df.duplicated()]
Duplicated_rows

# Check for duplicate 'coaster name'
df.loc[df.duplicated(subset=['Coaster_Name'])].head(5)

# Checking an example duplicate
df.query('Coaster_Name == "Crystal Beach Cyclone"')

# delete duplicates for a subset of columns
df = df.loc[~df.duplicated(subset=['Coaster_Name','Location','Opening_Date'])] \
    .reset_index(drop=True).copy()
df.head()

"""###**Step 3: Feature Understanding**
(Univariate analysis)

Plotting Feature Distributions

*   Histogram
*   KDE
*   Boxplot

"""

df.head()

# Count of distinct values for 'Year_Introduced'
df['Year_Introduced'].value_counts()

# Plotting the 'Year_Introduced' column with the number of values counted per year
ax = df['Year_Introduced'].value_counts() \
    .head(10) \
    .plot(kind='bar', title='Top 10 Years Coasters Introduced')
ax.set_xlabel('Year Introduced')
ax.set_ylabel('Count')

# Plotting the 'Year_Introduced' column as a boxplot
df.boxplot(column=['Year_Introduced'])

plt.title('Box plot of Year_Introduced')
plt.ylabel('Frequency')
plt.show()

# Plotting the 'Speed_mph' with the count to see the distribution
ax = df['Speed_mph'].plot(kind='hist',
                          bins=20,
                          title='Coaster Speed (mph)')
ax.set_xlabel('Speed (mph)')

# Plotting the 'Speed_mph' column as a boxplot
df.boxplot(column=['Speed_mph'])

plt.title('Box plot of Speed (mph)')
plt.ylabel('Frequency')
plt.show()

df.dtypes

# Plotting the 'Height_ft' with the count to see the distribution
ax = df['Height_ft'].plot(kind='hist',
                          bins=20,
                          title='Coaster Height (ft)')
ax.set_xlabel('Height')

# Plotting the 'Inversions' with the count to see the distribution
ax = df['Inversions'].plot(kind='hist',
                          bins=20,
                          title='Coaster Inversions')
ax.set_xlabel('Inversions')

# Plotting the 'Gforce' with the count to see the distribution
ax = df['Gforce'].plot(kind='hist',
                          bins=20,
                          title='Coaster Gforce')
ax.set_xlabel('Gforce')

# Plotting the 'Gforce' with the count to see the distribution
df.boxplot(column=['Gforce'])
plt.title('Box plot of Gforce')
plt.ylabel('Values')

# Kernel Density Estimation KDE
ax = df['Speed_mph'].plot(kind='kde',
                          title='Coaster Speed (mph)')
ax.set_xlabel('Speed (mph)')

# count of each type of rollercoster
df['Type_Main'].value_counts()

"""###**Step 4: Feature Relationships**
(Bivariate analysis)
*   Scatterplot
*   Heatmap Correlation
*   Pairplot
*   Groupby comparisons


"""

# Comparing features side by side:'Speed_mph' and 'Height_ft' with a Scatterplot
df.plot(x='Speed_mph', y='Height_ft', kind='scatter')
plt.title('Speed and height')
plt.xlabel('Speed')
plt.ylabel('Height')
plt.show()

# Plotting the 'Speed_mph' and 'Height_ft' with a Scatterplot and 'Year_Introduced'.
ax = sns.scatterplot(x='Speed_mph',
                y='Height_ft',
                hue='Year_Introduced',
                data=df)
ax.set_title('Coaster Speed vs. Height')
plt.show()

#Let's visualizing the relationships between multiple variables at once.
# Each plot in the grid shows the relationship between two variables,
# and the diagonal plots display a univariate distribution of the corresponding variable.

sns.pairplot(df,
             vars=['Year_Introduced','Speed_mph',
                   'Height_ft','Inversions','Gforce'],
            hue='Type_Main')
plt.show()

# Let's see the correlation factor between the numerical variables on the dataset.
# The cl0ser to 1 or -1 , the better the correlation is(negative correlation for -1 AND POSITIVE FOR 1).
# I dropped all null Values IN THIS CASE.
df_corr = df[['Year_Introduced','Speed_mph',
    'Height_ft','Inversions','Gforce']].dropna().corr()
df_corr

# Let's use a heatmap to plot the previous variables using annotation to show the values:
sns.heatmap(df_corr, annot=True)

"""###**Step 5: Ask a Question about the data**


*   What are the locations with the fastest rollercoster?



"""

df['Location'].value_counts()

# Let's plot the average coast speed by location excluding "Others"
ax = df.query('Location != "Other"') \
    .groupby('Location')['Speed_mph'] \
    .agg(['mean','count']) \
    .query('count >= 10') \
    .sort_values('mean')['mean'] \
    .plot(kind='barh', figsize=(12, 5), title='Average Coast Speed by Location')
ax.set_xlabel('Average Coaster Speed')
plt.show()